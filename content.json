{"meta":{"title":"C:\\EEDLIVE","subtitle":"Stay Hungry, Stay Foolish.","description":"소프트웨어를 도구로 인류와 사회의 가치를 높이는데 소명을 다하는 삶","author":"better than choi","url":"https://ceedlive.github.io"},"pages":[{"title":"about","date":"2017-08-28T15:14:27.000Z","updated":"2017-08-29T14:15:12.000Z","comments":true,"path":"about/index.html","permalink":"https://ceedlive.github.io/about/index.html","excerpt":"","text":""},{"title":"about","date":"2017-08-28T15:14:27.000Z","updated":"2017-08-29T14:15:01.000Z","comments":true,"path":"resume/index.html","permalink":"https://ceedlive.github.io/resume/index.html","excerpt":"","text":""}],"posts":[{"title":"Centos7 firewalld 기반의 접근제어 사용법","slug":"centos7-firewalld-usage","date":"2018-12-02T07:40:48.000Z","updated":"2018-12-02T07:40:48.300Z","comments":true,"path":"2018/12/02/centos7-firewalld-usage/","link":"","permalink":"https://ceedlive.github.io/2018/12/02/centos7-firewalld-usage/","excerpt":"","text":"firewalldRHEL 7 부터는 방화벽을 관리하는 데몬이 firewalld 로 변경되었고 방화벽 설정은 복잡한 iptables 명령어대신 firewall-cmd (콘솔), firewall-config(X-Windows) 명령어를 사용하는 것을 권장합니다. https://www.lesstif.com/pages/viewpage.action?pageId=22053128 기본 사용법조건: 21,22,80 포트(TCP)를 허용룰 추가123$ firewall-cmd --add-port=21/tcp$ firewall-cmd --add-port=22/tcp$ firewall-cmd --add-port=80/tcp 룰 삭제123$ firewall-cmd --remove-port=21/tcp$ firewall-cmd --remove-port=22/tcp$ firewall-cmd --remove-port=80/tcp 조건: 8000 ~ 9000 까지의 포트(TCP)를 허용룰 추가1$ firewall-cmd --add-port=8000-9000/tcp 룰 삭제1$ firewall-cmd --remove-port=8000-9000/tcp 조건: 192.168.0.0/255.255.255.0 대역을 허용12$ firewall-cmd --add-source=192.168.0.0/24$ firewall-cmd --remove-source=192.168.0.0/24 조건: 192.168.3.100 아이피(IP)를 허용12$ firewall-cmd --add-source=192.168.3.100$ firewall-cmd --remove-source=192.168.3.100 조건: 192.168.5.100 아이피(IP)를 차단reject12$ firewall-cmd --add-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 reject$ firewall-cmd --remove-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 reject drop12$ firewall-cmd --add-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 drop$ firewall-cmd --remove-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 drop reject vs dropreject: 차단을 하되 “당신 차단 되었음” 이라는 응답을 전송drop: 그냥 차단 조건: 192.168.10.170 아이피(IP)에 대해 80번 포트를 허용12$ firewall-cmd --add-rich-rule='rule family=\"ipv4\"' source address=192.168.10.170 port port=\"80\" protocol=\"tcp\" accept$ firewall-cmd --remove-rich-rule='rule family=\"ipv4\"' source address=192.168.10.170 port port=\"80\" protocol=\"tcp\" accept 설정파일(public.xml)에 적용 하기1$ firewall-cmd --permanent 설정할 내용 123456789$ firewall-cmd --permanent --add-port=21/tcp$ firewall-cmd --permanent --add-port=22/tcp$ firewall-cmd --permanent --add-port=80/tcp$ firewall-cmd --permanent --add-port=8000-9000/tcp$ firewall-cmd --permanent --add-source=192.168.0.0/24$ firewall-cmd --permanent --add-source=192.168.3.100$ firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 reject$ firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\"' source address=192.168.5.100 drop$ firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\"' source address=192.168.10.170 port port=\"80\" protocol=\"tcp\" accept 1$ firewall-cmd --reload 터미널에서 상태 확인1$ firewall-cmd --list-all 123456789101112public (default)interfaces:sources: 192.168.3.100 192.168.0.0/24services: dhcpv6-client sshports: 21/tcp 80/tcp 8000-9000/tcp 22/tcpmasquerade: noforward-ports:icmp-blocks:rich rules:rule family=\"ipv4\" source address=\"192.168.5.100\" rejectrule family=\"ipv4\" source address=\"192.168.5.100\" droprule family=\"ipv4\" source address=\"192.168.10.170\" port port=\"80\" protocol=\"tcp\" accept public.xml1$ vi /etc/firewalld/zones/public.xml 1234567891011121314151617181920212223242526&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;zone&gt;&lt;short&gt;Public&lt;/short&gt;&lt;description&gt;&lt;/description&gt;&lt;source address=\"192.168.0.0/24\"/&gt;&lt;source address=\"192.168.3.100\"/&gt;&lt;service name=\"dhcpv6-client\"/&gt;&lt;service name=\"ssh\"/&gt;&lt;port protocol=\"tcp\" port=\"21\"/&gt;&lt;port protocol=\"tcp\" port=\"80\"/&gt;&lt;port protocol=\"tcp\" port=\"8000-9000\"/&gt;&lt;port protocol=\"tcp\" port=\"22\"/&gt;&lt;rule family=\"ipv4\"&gt;&lt;source address=\"192.168.5.100\"/&gt;&lt;reject/&gt;&lt;/rule&gt;&lt;rule family=\"ipv4\"&gt;&lt;source address=\"192.168.5.100\"/&gt;&lt;drop/&gt;&lt;/rule&gt;&lt;rule family=\"ipv4\"&gt;&lt;source address=\"192.168.10.170\"/&gt;&lt;port protocol=\"tcp\" port=\"80\"/&gt;&lt;accept/&gt;&lt;/rule&gt;&lt;/zone&gt; 참고CentOS 7 방화벽 관리하기 (firewalld) http://millky.com/@origoni/post/1128?language=ko_krRHEL/CentOS 7 에서 방화벽(firewalld) 설정하기 https://www.lesstif.com/pages/viewpage.action?pageId=22053128리눅스 방화벽 firewalld (CentOS7) https://www.conory.com/note_linux/42477CentOS 방화벽 사용방법 http://blog.plura.io/?p=4519CentOS7 https://www.cmsfactory.net/node/11421","categories":[{"name":"Linux","slug":"Linux","permalink":"https://ceedlive.github.io/categories/Linux/"},{"name":"CentOS7","slug":"Linux/CentOS7","permalink":"https://ceedlive.github.io/categories/Linux/CentOS7/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ceedlive.github.io/tags/linux/"},{"name":"centos7","slug":"centos7","permalink":"https://ceedlive.github.io/tags/centos7/"},{"name":"firewalld","slug":"firewalld","permalink":"https://ceedlive.github.io/tags/firewalld/"}]},{"title":"점검중(공사중) 페이지 설정","slug":"how-to-setup-under-construction-on-apache2-tomcat7","date":"2018-11-27T03:23:00.000Z","updated":"2018-12-02T07:43:45.364Z","comments":true,"path":"2018/11/27/how-to-setup-under-construction-on-apache2-tomcat7/","link":"","permalink":"https://ceedlive.github.io/2018/11/27/how-to-setup-under-construction-on-apache2-tomcat7/","excerpt":"","text":"개요현재 운영 중인 서비스(이하 265, 가칭)는 프론트엔드 코드베이스와 백엔드 코드베이스가 각각 별도의 프로젝트로 분리되어 개발 되었으며, RESTful하게 구현된 API를 이용하여 요청과 응답을 처리한다.서비스 운영 중 발견된 버그 수정이나 이슈 해결, 기존 서비스 고도화, 신규 서비스 추가 적용을 위해 매주 목요일 오전 재배포를 진행하곤 하는데, 이때 해당 도메인으로 접근 시 “서버 점검중 입니다.” 라는 메시지가 출력되는 점검중 페이지를 화면에 출력하면 서비스 운영 관점에서 더 좋지 않을까 생각이 들었다. 그래서 점검중 페이지를 띄우는 방법을 고민하고 테스트 한 다음 이를 다음과 같이 정리해보았다. 점검중(공사중) 페이지 설정: 사이트 점검이 필요한 경우 원래 URL로 접근시 다른 페이지로 Redirect 하기?!서버 구성에 따라 몇가지 방법이 있음.1. DNS 가 즉시 적용되는 DDNS 라면 DNS 에서 점검페이지 표시를 해주는 “다른 서버” 를 바라보게 해준다. 혹은 DDNS 서버에서 점검중 페이지를 띄워주는 웹포워딩 서비스를 이용한다.2. 웹서버가 따로 있을 경우 해당 도메인에 대한 redirect 설정을 해준다. mod_jk 등으로 연동이 되어있을 경우 JKMount 의 값을 적절히 변경하여 Tomcat 으로 가지 않게 해준다던지… 적절하게 조치를 해준다.3. mod_jk 을 통해 서비스를 하지만 apache 에서 처리하기 어렵거나 WAS 로 직접 서비스를 하고 있다면 해당 도메인(혹은 IP)로 들어오는 것을 다른 인스턴스를 바라보고 하고, 해당 인스턴스는 모든 접속에 대해 처리하는 servlet 을 하나 만들어 무조건 점검중 페이지를 보여주게 구성한다.2번 방법 사용: mod_jk로 연동이 되어있어 JKMount 의 값을 변경하여 Tomcat 으로 가지 않게 하는 방법 사용참고265 F/E: Apache2 + Tomcat7 연동265 B/E: Tomcat7Apache2(Web Server) 1, Tomcat(Web Application Server) 2개가 맞물려 서비스됨 Quick Start1. 새로운 DocumentRoot 디렉토리 생성하기12$ cd /var/www/$ sudo mkdir 265 2. 점검중(공사중) 페이지로 사용할 html 파일 생성 후 DocumentRoot에 복사하기12$ sudo cp brandnew_under_construction.html /var/www/265$ sudo mv brandnew_under_construction.html index.html 3. File Not Found 에러 발생 시 렌더링 될 페이지 index.html 페이지와 동일하게 구현 후 DocumentRoot에 복사하기12$ cd /var/www/265$ sudo cp index.html 404error.html 참고: index.html 파일과 404error.html 파일이 같으므로 결과적으로 모든 요청에 대해 동일한 화면을 출력하게 됨4. 점검중(공사중) 페이지에서 사용할 이미지 관리 디렉토리 생성하기12$ sudo cd /usr/share/apache2/$ sudo mkdir 265 5. 생성한 디렉토리에 점검중(공사중) 페이지에서 사용할 이미지 넣기123$ sudo cp icon_warning.png /usr/share/apache2/265/$ sudo cp icon_com.png /usr/share/apache2/265/$ sudo cp logo_foot.png /usr/share/apache2/265/ 6. alias 추가하여 /edugo/이미지명 으로 파일 접근할 수 있도록 설정하기12345$ cd /etc/apache2/mods-enabled/alias.conf$ sudo vi alias.conf# /icons/ \"/usr/share/apache2/icons/# 위의 라인 하단에 다음 라인 추가# /edugo/ \"/usr/share/apache2/265/ 7. 변경사항 저장 후 종료1$ wq 8. Apache2 + Tomcat7 연동 떼어내기12345$ cd /etc/apache2/sites-available$ sudo vi 000-default.conf# &lt;VirtualHost *:80&gt;&lt;/VirtualHost&gt; 태그 하단에 설정한 다음 코드 주석처리# JKMount /* ajp13_worker -&gt; # JKMount /* ajp13_worker 9. DocumentRoot 다음과 같이 변경하기1# DocumentRoot /var/www/html -&gt; DocumentRoot /var/www/265 10. Errordocument 추가하기: 265.com 이하 모든 경로의 URL에 대해 404error.html 로 핸들링1$ Errordocument 404 \"/404error.html\" 11. 변경사항 저장 후 종료1$ wq 12. 아파치 서비스 재시작1$ service apache2 restart 지금부터 265.com 이하 모든 요청에 대해 점검중(공사중) 페이지 출력됨13. 톰캣 F/E 정지12$ su -$ service tomcat7 stop 14. 톰캣 B/E 정지12$ su - tomcat_be$ service tomcat_be stop 15. 재배포 작업 진행16. 톰캣 B/E 재기동12$ su - tomcat_be$ service tomcat_be start 17. 톰캣 F/E 재기동12$ su -$ service tomcat7 start 18. Apache2 + Tomcat7 다시 연동하기123$ cd /etc/apache2/sites-available$ sudo vi 000-default.conf# &lt;VirtualHost *:80&gt;&lt;/VirtualHost&gt; 태그 하단에 설정한 다음 코드 주석해제 19. 아파치 서비스 재시작1$ service apache2 restart 20. 265.com 으로 접속 시 재배포 한 소스파일이 정상적으로 렌더링","categories":[{"name":"web","slug":"web","permalink":"https://ceedlive.github.io/categories/web/"}],"tags":[{"name":"how to","slug":"how-to","permalink":"https://ceedlive.github.io/tags/how-to/"},{"name":"setup","slug":"setup","permalink":"https://ceedlive.github.io/tags/setup/"},{"name":"under construction","slug":"under-construction","permalink":"https://ceedlive.github.io/tags/under-construction/"},{"name":"apache2","slug":"apache2","permalink":"https://ceedlive.github.io/tags/apache2/"},{"name":"tomcat7","slug":"tomcat7","permalink":"https://ceedlive.github.io/tags/tomcat7/"},{"name":"점검중","slug":"점검중","permalink":"https://ceedlive.github.io/tags/점검중/"},{"name":"공사중","slug":"공사중","permalink":"https://ceedlive.github.io/tags/공사중/"}]},{"title":"Hexo 태그 플러그인 (Tag plugins)","slug":"hexo-tag-plugins","date":"2017-09-05T12:52:05.000Z","updated":"2017-09-05T12:52:05.000Z","comments":true,"path":"2017/09/05/hexo-tag-plugins/","link":"","permalink":"https://ceedlive.github.io/2017/09/05/hexo-tag-plugins/","excerpt":"","text":"Hexo 태그 플러그인Hexo 는 마크다운 외에 포스트를 작성하기 위한 자체적인 문법을 지원합니다. 그것을 태그 플러그인 이라고 합니다. jsFiddle온라인 상에서 HTML, CSS, JavaScript를 작성하고 테스트할 수 있는 서비스JSFiddle https://jsfiddle.net/ 포스트 삽입해당 블로그 내에 있는 포스트 첨부.따로 주소를 복사해서 링크를 만들지 않아도 됨. Eaxmple1&#123;% post_link create-blog-github-pages-and-hexo %&#125; ResultGitHub Pages와 Hexo를 이용하여 블로그 시작하기 참고Hexo 태그 플러그인 (Tag plugins) 살펴보기 http://futurecreator.github.io/2016/06/19/hexo-tag-plugins/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ceedlive.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ceedlive.github.io/tags/hexo/"},{"name":"tag","slug":"tag","permalink":"https://ceedlive.github.io/tags/tag/"},{"name":"plugin","slug":"plugin","permalink":"https://ceedlive.github.io/tags/plugin/"}]},{"title":"Hexo 기본 사용법","slug":"hexo-basic-usage","date":"2017-09-05T12:51:38.000Z","updated":"2017-10-10T14:10:57.000Z","comments":true,"path":"2017/09/05/hexo-basic-usage/","link":"","permalink":"https://ceedlive.github.io/2017/09/05/hexo-basic-usage/","excerpt":"","text":"정의 Hexo는 빠르고 간단하고 파워풀한 블로그 프레임워크입니다. Markdown(또는 다른 언어)을 사용하여 포스트를 작성하면 Hexo는 금세 멋진 테마를 가미해서 정적인 파일을 생성해 드립니다. Front-matter마크다운 파일 최상단에 있는 포스트 정보 설정 영역.--- 로 구분되어 있음.YAML 이나 JSON 으로 정보 설정 가능. YAML1title: Hexo 기본 사용법 설정 설정 설명 기본값 layout 레이아웃 title 제목 date 배포한 날짜 파일 생성 날짜 updated 수정된 날짜 파일 생성 날짜 comments 코멘트 기능 여부 true tags 태그 (Page 에서는 사용 불가) categories 카테고리 (Page 에서는 사용 불가) permalink 포스트의 URL을 수동으로 설정 가능 thumbnail 썸네일 지정 본문 첫번째 이미지 YAMLYAML은 XML, C, 파이썬, 펄, RFC2822에서 정의된 e-mail 양식에서 개념을 얻어 만들어진 ‘사람이 쉽게 읽을 수 있는’ 데이터 직렬화 양식이다. 2001년에 클라크 에반스가 고안했고, Ingy dot Net 및 Oren Ben-Kiki와 함께 디자인했다.YAML이라는 이름은 “YAML은 마크업 언어가 아니다 (YAML Ain’t Markup Language)” 라는 재귀적인 이름에서 유래되었다. 원래 YAML의 뜻은 “또 다른 마크업 언어 (Yet Another Markup Language)”였으나, YAML의 핵심은 문서 마크업이 아닌 데이터 중심에 있다는 것을 보여주기 위해 이름을 바꾸었다. 오늘날 XML이 데이터 직렬화에 주로 쓰이기 시작하면서, 많은 사람들이 YAML을 ‘가벼운 마크업 언어’로 사용하려 하고 있다.출처 YAML - 위키백과, 우리 모두의 백과사전 JSONJSON(제이슨[1], JavaScript Object Notation)은 속성-값 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다. 비동기 브라우저/서버 통신 (AJAX)을 위해, 넓게는 XML(AJAX가 사용)을 대체하는 주요 데이터 포맷이다. 특히, 인터넷에서 자료를 주고 받을 때 그 자료를 표현하는 방법으로 알려져 있다. 자료의 종류에 큰 제한은 없으며, 특히 컴퓨터 프로그램의 변수값을 표현하는 데 적합하다.본래는 자바스크립트 언어로부터 파생되어 자바스크립트의 구문 형식을 따르지만 언어 독립형 데이터 포맷이다. 즉, 프로그래밍 언어나 플랫폼에 독립적이므로, 구문 분석 및 JSON 데이터 생성을 위한 코드는 C, C++, C#, 자바, 자바스크립트, 펄, 파이썬 등 수많은 프로그래밍 언어에서 쉽게 이용할 수 있다.JSON 포맷은 본래 더글라스 크록포드가 규정하였다. RFC 7159와 ECMA-404라는 두 개의 경쟁 표준에 의해 기술되고 있다. ECMA 표준은 문법만 정의할 정도로 최소한으로만 정의되어 있는 반면 RFC는 시맨틱, 보안적 고려 사항을 일부 제공하기도 한다.[2] JSON의 공식 인터넷 미디어 타입은 application/json이며, JSON의 파일 확장자는 .json이다.출처 JSON - 위키백과, 우리 모두의 백과사전 로컬서버로컬서버 구동. draft로 작성한 초안 보이지 않음.1$ hexo server 로컬서버 구동. draft로 작성한 초안 보임. 1$ hexo server --draft 로컬서버 구동. 옵션 2개 이상 사용 예시. 1$ hexo server --o --draft 설정 옵션 설명 기본값 –i, –ip 서버 IP를 지정합니다. 0.0.0.0 –p, –port 포트 번호를 지정합니다. 4000 –s, –static 정적 (static) 파일만 게시합니다. false –l, –log 서버 로그를 표시합니다. false –o, –open 서버 기동과 동시에 브라우저 창으로 접속합니다. false –draft 초안도 게시합니다. false 카테고리/태그카테고리와 태그는 Post와 Draft에서 사용 가능.카테고리를 지정하면 메인 화면의 메뉴에 카테고리 자동 추가. 카테고리/태그는 여러 개 설정 가능.Post or Draft 마크다운 파일 상단의 front-matter 123456789---title: Hexo 기본 사용법tags:- Hexocategories:- hexo- blog- framework--- 참고Hexo 기본 사용법 http://futurecreator.github.io/2016/06/21/hexo-basic-usage/헥소 설정기 https://originerd.github.io/2017/01/21/how-i-set-hexo/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ceedlive.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ceedlive.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://ceedlive.github.io/tags/blog/"},{"name":"framework","slug":"framework","permalink":"https://ceedlive.github.io/tags/framework/"}]},{"title":"자바 - 문자열 찾기","slug":"java-find-string","date":"2017-09-02T07:01:33.000Z","updated":"2017-09-05T12:45:38.000Z","comments":true,"path":"2017/09/02/java-find-string/","link":"","permalink":"https://ceedlive.github.io/2017/09/02/java-find-string/","excerpt":"","text":"containspublic boolean contains(CharSequence s)Returns true if and only if this string contains the specified sequence of char values.Parameter:s - the sequence to search forReturns:true if this string contains s, false otherwiseSince:1.5 indexOfpublic int indexOf(int ch)Returns the index within this string of the first occurrence of the specified character. If a character with value ch occurs in the character sequence represented by this String object, then the index (in Unicode code units) of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: this.charAt(k) == ch is true. For other values of ch, it is the smallest value k such that: this.codePointAt(k) == ch is true. In either case, if no such character occurs in this string, then -1 is returned.Parameters:ch - a character (Unicode code point).Returns:the index of the first occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur. matchespublic boolean matches(String regex)Tells whether or not this string matches the given regular expression.An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression Pattern.matches(regex, str)Parameters:regex - the regular expression to which this string is to be matchedReturns:true if, and only if, this string matches the given regular expressionThrows:PatternSyntaxException - if the regular expression’s syntax is invalidSince:1.4See Also:Pattern 백문이 불여일타12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * Created by ceedlive on 2017. 9. 2.. */public class StringFinder &#123; public static void main(String[] args) &#123; //variables String description = \"배송지 정보: 인천광역시 서구, \" + \"주문도서: 진짜 잘 이해되는 중학 영문법 1\" + \"정가: (14,000원)\" + \"할인가: (12,600원)\" ; String mobileNo = \"010-1234-5678\"; String homeNo = \"032-123-4567\"; String email = \"abcdefghijklmnopqrstuvwxyz@naver.com\"; String regexMobileNo = \"^01(?:0|1|[6-9])-(?:\\\\d&#123;3&#125;|\\\\d&#123;4&#125;)-\\\\d&#123;4&#125;$\";//휴대폰 번호 검증 String regexHomeNo = \"^(02|0[3-9]&#123;1&#125;[0-9]&#123;1&#125;)-(?:\\\\d&#123;4&#125;|\\\\d&#123;3&#125;)-\\\\d&#123;4&#125;$\";//집/사무실 전화번호 검증 String regexEmail = \"^[_a-z0-9-]+(.[_a-z0-9-]+)*@(?:\\\\w+\\\\.)+\\\\w+$\"; //try //contains if (description.contains(\"인천광역시 서구\")) &#123; System.out.println(description.contains(\"인천광역시 서구\"));//true System.out.println(\"배송비 무료\"); &#125; else &#123; System.out.println(\"배송비 유료\"); &#125; //indexOf if (description.indexOf(\"인천광역시 서구\") &gt; -1) &#123; System.out.println(description.indexOf(\"인천광역시 서구\"));//8 System.out.println(\"배송비 무료\"); &#125; else &#123; System.out.println(\"배송비 유료\"); &#125; //matches if (description.matches(\".*인천광역시 서구.*\")) &#123; System.out.println(description.matches(\".*인천광역시 서구.*\"));//true System.out.println(\"배송비 무료\"); &#125; else &#123; System.out.println(\"배송비 유료\"); &#125; //matches if (description.matches(\".*[0-9].*\")) &#123; System.out.println(description.matches(\".*[0-9].*\"));//true System.out.println(\"숫자 있음\"); &#125; else &#123; System.out.println(\"숫자 없음\"); &#125; if (mobileNo.matches(regexMobileNo)) &#123; System.out.println(\"휴대폰 번호 형식과 일치\"); &#125; else &#123; System.out.println(\"휴대폰 번호 형식과 일치하지 않음\"); &#125; if (homeNo.matches(regexHomeNo)) &#123; System.out.println(\"집/사무실 번호 형식과 일치\"); &#125; else &#123; System.out.println(\"집/사무실 번호 형식과 일치하지 않음\"); &#125; if (email.matches(regexEmail)) &#123; System.out.println(\"이메일 형식과 일치\"); &#125; else &#123; System.out.println(\"이메일 형식과 일치하지 않음\"); &#125; &#125;&#125; 참고Class String https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#method.summary","categories":[{"name":"Java","slug":"Java","permalink":"https://ceedlive.github.io/categories/Java/"},{"name":"Method","slug":"Java/Method","permalink":"https://ceedlive.github.io/categories/Java/Method/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ceedlive.github.io/tags/java/"},{"name":"contains","slug":"contains","permalink":"https://ceedlive.github.io/tags/contains/"},{"name":"indexOf","slug":"indexOf","permalink":"https://ceedlive.github.io/tags/indexOf/"},{"name":"matches","slug":"matches","permalink":"https://ceedlive.github.io/tags/matches/"}]},{"title":"자바 - 중복되지 않는 키 생성","slug":"java-create-random-key","date":"2017-08-31T15:52:54.000Z","updated":"2017-09-05T12:45:47.000Z","comments":true,"path":"2017/09/01/java-create-random-key/","link":"","permalink":"https://ceedlive.github.io/2017/09/01/java-create-random-key/","excerpt":"","text":"java.util.UUID classA class that represents an immutable universally unique identifier (UUID). A UUID represents a 128-bit value.Since: 1.5 UUID (Universally Unique IDentifier) 범용 고유 식별자(汎用固有識別子, 영어: universally unique identifier, UUID)는 소프트웨어 구축에 쓰이는 식별자 표준으로, 개방 소프트웨어 재단(OSF)이 분산 컴퓨팅 환경(DCE)의 일부로 표준화하였다.개요네트워크 상에서 서로 모르는 개체들을 식별하고 구별하기 위해서는 각각의 고유한 이름이 필요하다. 이 이름은 고유성(유일성)이 매우 중요하다. 같은 이름을 갖는 개체가 존재한다면 구별이 불가능해 지기 때문이다. 고유성을 완벽하게 보장하려면 중앙관리시스템이 있어서 일련번호를 부여해 주면 간단하지만 동시다발적이고 독립적으로 개발되고 있는 시스템들의 경우 중앙관리시스템은 불가능하다. 개발주체가 스스로 이름을 짓도록 하되 고유성을 충족할 수 있는 방법이 필요하다. 이를 위하여 탄생한 것이 범용고유식별자(UUID)이며 국제기구에서 표준으로 정하고 있다.UUID 표준에 따라 이름을 부여하면 고유성을 완벽하게 보장할 수는 없지만 실제 사용상에서 중복될 가능성이 거의 없다고 인정되기 때문에 많이 사용되고 있다.정의UUID는 16 옥텟 (128비트)의 수이다. 표준 형식에서 UUID는 32개의 십육진수로 표현되며 총 36개 문자(32개 문자와 4개의 하이픈)로 된 8-4-4-4-12라는 5개의 그룹을 하이픈으로 구분한다. 이를테면 다음과 같다.550e8400-e29b-41d4-a716-446655440000340,282,366,920,938,463,463,374,607,431,768,211,456개의 사용 가능한 UUID가 있다.출처범용 고유 식별자 - 위키백과, 우리 모두의 백과사전 백문이 불여일타12345678import java.util.UUID;public static void main(String[] args) &#123; for (int i=0; i&lt;10; i++) &#123; UUID uuid = UUID.randomUUID(); System.out.println(\"uuid: \" + uuid); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://ceedlive.github.io/categories/Java/"},{"name":"Class","slug":"Java/Class","permalink":"https://ceedlive.github.io/categories/Java/Class/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ceedlive.github.io/tags/java/"},{"name":"uuid","slug":"uuid","permalink":"https://ceedlive.github.io/tags/uuid/"}]},{"title":"GitHub Pages와 Hexo를 이용하여 블로그 시작하기","slug":"create-blog-github-pages-and-hexo","date":"2017-08-29T14:33:00.000Z","updated":"2017-10-10T15:15:56.000Z","comments":true,"path":"2017/08/29/create-blog-github-pages-and-hexo/","link":"","permalink":"https://ceedlive.github.io/2017/08/29/create-blog-github-pages-and-hexo/","excerpt":"","text":"GitHub PagesWhat is GitHub Pages? TODOCreate a repositoryHead over to GitHub and create a new repository named username.github.io, where username is your username (or organization name) on GitHub. if the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right. New repository Repository name = USERNAME.github.io USERNAME 은 Github의 가입시에 입력한 사용자의 username Public / Private 중 Public 선택 Create repository 버튼을 클릭하여 repository 생성 Clone the repositoryGo to the folder where you want to store your project, and clone the new repository: 1$ git clone https://github.com/username/username.github.io Hexo Hexo는 빠르고 간단하고 파워풀한 블로그 프레임워크입니다. Markdown(또는 다른 언어)을 사용하여 포스트를 작성하면 Hexo는 금세 멋진 테마를 가미해서 정적인 파일을 생성해 드립니다. Node.js 기반 정적 사이트 생성기https://hexo.io/ko/index.html Themehttps://hexo.io/themes/ Quick StartInstallationFirst, clone this repository. 12$ cd your/hexo/directory$ git clone https://github.com/HyunSeob/hexo-theme-overdose.git themes/overdose The overdose theme is using jade/sass(with bourbon). So install renderers. 1$ npm install --save hexo-renderer-jade hexo-renderer-bourbon And clone vendor repositories. 12$ cd themes/overdose$ npm run clone Then, copy the configuration example file. 1$ cp _config.yml.example _config.yml And then, specify overdose theme in your root configuration file. 1theme: overdose Finally, start the hexo server and enjoy. 1$ hexo server http://localhost:4000 글쓰기발행되는 문서 작성 (/source/_posts/)1$ hexo new &lt;포스트명&gt; 발행되지 않는 초안(draft) 문서 작성 (/source/_drafts)1$ hexo new draft &lt;포스트명&gt; Moves a draft post from _drafts to _posts folder.Published.1$ hexo publish &lt;포스트명&gt; 글지우기1$ rm source/_posts/&lt;포스트명&gt; 배포hexo-deployer-git 플러그인 설치1$ npm install --save hexo-deployer-git _config.yml 에 다음과 같이 GitHub 정보 입력 (주의: themes 폴더 내부에 있는 _config.yml 파일 아님)12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/CEEDLIVE/CEEDLIVE.github.io.git 정적 파일 생성1$ hexo generate deploy1$ hexo deploy 정적 파일 생성 후 deploy: 생성 + deploy 생성 후에 deploy 하기위해 다음 명령어 중 하나를 실행해야 합니다. 두 명령어는 동일한 동작을 수행합니다. 12$ hexo generate --deploy$ hexo deploy --generate Deleted database.Deleted public folder.1$ hexo clean 기타완성된 GitHub Pages + Hexo + overdose(theme) 프로젝트 폴더 구조123456789101112131415CEEDLIVE.github.io`-- blog |-- node_modules |-- public |-- scaffolds |-- source |-- themes | |-- landscape | `-- overdose | |-- layout | |-- scripts | |-- source | |-- _config.yml | `-- _config.yml.example `-- _config.yml Create dir tree URL위와 같이 폴더 구조를 텍스트로 표현하려고 하는 경우 이용하면 좋은 사이트http://jsfiddle.net/WjAk9/7/embedded/result/ 참고 Hexo 시작하기 https://hyunseob.github.io/2016/02/23/start-hexo/ Github Pages와 Hexo를 통해 30분만에 기술 블로그 만들기 https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/ [Markdown]마크다운 문법 https://simhyejin.github.io/2016/06/30/Markdown-syntax/ GitHub Pages https://pages.github.com/ Hexo https://hexo.io/ko/ Hexo - 또 다른 정적 사이트 생성도구 http://blog.iolo.kr/518 hexo + github + blog 연동하기 https://taetaetae.github.io/2016/09/18/hexo_github_blog/ GitHub Pages와 travis-ci를 이용한 정적 블로그 구축하기 http://static-blog-sample.libsora.so/posts/static-blog-sample/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ceedlive.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ceedlive.github.io/tags/hexo/"}]}]}